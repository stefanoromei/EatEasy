-- MySQL Script generated by MySQL Workbench
-- Wed Jan 11 13:28:00 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema EatEasyDB
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema EatEasyDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `EatEasyDB` DEFAULT CHARACTER SET utf8 ;
USE `EatEasyDB` ;

-- -----------------------------------------------------
-- Table `EatEasyDB`.`Table`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `EatEasyDB`.`Table` (
  `tableId` INT NOT NULL AUTO_INCREMENT,
  `minNumOfClients` INT NULL,
  `maxNumOfClients` INT NULL,
  PRIMARY KEY (`tableId`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `EatEasyDB`.`Booking`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `EatEasyDB`.`Booking` (
  `bookingId` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(200) NULL,
  `numOfClients` INT NULL,
  `date` DATETIME NULL,
  `timeSlot` ENUM('LUNCH', 'DINNER') NULL,
  `Table_tableId` INT NOT NULL,
  PRIMARY KEY (`bookingId`),
  INDEX `fk_Booking_Table_idx` (`Table_tableId` ASC) VISIBLE,
  CONSTRAINT `fk_Booking_Table`
    FOREIGN KEY (`Table_tableId`)
    REFERENCES `EatEasyDB`.`Table` (`tableId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `EatEasyDB` ;

-- -----------------------------------------------------
-- procedure add_booking
-- -----------------------------------------------------

DELIMITER $$
USE `EatEasyDB`$$
CREATE PROCEDURE `add_booking` (
in var_name VARCHAR(200),
in var_numOfClients INT,
in var_date DATETIME,
in var_timeSlot ENUM('LUNCH', 'DINNER'),
in var_tableId INT,
out var_bookingId INT)
BEGIN
INSERT INTO `booking`(`name`, `numOfClients`, `date`, `timeSlot`, `Table_tableId`)
VALUE (var_name, var_numOfClients, var_date, var_timeSlot, var_tableId);
SELECT `bookingId` FROM `booking` WHERE `name` = var_name AND `numOfClients`=var_numOfClients AND `date` = var_date AND `timeSlot`=var_timeSlot and `Table_tableId`=var_tableId;
COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure is_free
-- -----------------------------------------------------

DELIMITER $$
USE `EatEasyDB`$$
CREATE PROCEDURE `is_free` (
in var_numberOfClients int,
in var_date datetime,
in var_timeSlot enum('dinner', 'lunch'),
in var_tableId int
)
BEGIN
SELECT count(*) 
FROM booking
WHERE `date` = var_date
AND `timeSlot` = var_timeSlot
AND `Table_tableId` = var_tableId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_table
-- -----------------------------------------------------

DELIMITER $$
USE `EatEasyDB`$$
CREATE PROCEDURE `get_table` ()
BEGIN
select *
from `table`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure add_table
-- -----------------------------------------------------

DELIMITER $$
USE `EatEasyDB`$$
CREATE PROCEDURE `add_table` (
in var_minNumOfClients int,
in var_maxNumOfClients int,
out var_tableId int)
BEGIN
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
START TRANSACTION;
INSERT INTO `table` (minNumOfClients, maxNumOfClients) value (var_minNumOfClients, var_maxNumOfClients);
SET var_tableId = last_insert_id();
COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_table
-- -----------------------------------------------------

DELIMITER $$
USE `EatEasyDB`$$
CREATE PROCEDURE `update_table` (
in var_tableId int ,
in var_minNumOfClients int,
in var_maxNumOfClients int)
BEGIN
UPDATE `table` SET minNumOfClients = var_minNumOfClients WHERE tableId = var_tableId;
UPDATE `table` SET maxNumOfClients = var_maxNumOfClients WHERE tableId = var_tableId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure delete_table
-- -----------------------------------------------------

DELIMITER $$
USE `EatEasyDB`$$
CREATE PROCEDURE `delete_table` (
inout var_tableId int)
BEGIN
DELETE FROM `table` WHERE tableId = var_tableId;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
